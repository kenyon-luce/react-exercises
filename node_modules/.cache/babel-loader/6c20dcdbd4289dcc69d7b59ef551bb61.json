{"ast":null,"code":"var _s = $RefreshSig$();\n\n//custom hooks\n//moving logic into here so we can re use it\nimport { useState, useEffect } from 'react'; //importing API\n\nimport API from '../API';\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [state, setState] = useState(initialState); //set default state\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  console.log(searchTerm);\n\n  const fetchMovies = async (page, searchTerm = '') => {\n    //async function lets us grab information from our api\n    //searchTerm will use a state value but when a search term isn't passed in it will default to an empty string as defined in the parameter\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page); // console.log(movies);\n\n      setState(prev => ({ //returning an object\n        ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results] //^^the \"...\" is used to grab all of the requested results and \"spread\" it into the results array. Appends a new list of movies to the previous list if the results return more than one page. If we are not loading more we can just wipe out the previous list\n\n      }));\n    } catch (error) {\n      setError(true);\n    } //since we had set the loading to true, we have to set it to false when we have grabbed all the movies\n\n\n    setLoading(false);\n  }; //initial render and search (first page)\n\n\n  useEffect(() => {\n    fetchMovies(1), searchTerm;\n  }, [searchTerm]); //will trigger again each time a search term is passed\n  //^^since we didn't define what we are searching for, the first page returns the most popular movies currently (as declared in API.js ln 19-24)\n  //*each page can have up to 1000 results\n\n  return {\n    state,\n    loading,\n    error,\n    setSearchTerm\n  };\n};\n\n_s(useHomeFetch, \"VsiJ5IPCwz7WUuNFut7id5a+BOs=\");","map":{"version":3,"sources":["/Users/kenyonluce/IdeaProjects/react-exercises/src/hooks/useHomeFetch.js"],"names":["useState","useEffect","API","initialState","page","results","total_pages","total_results","useHomeFetch","searchTerm","setSearchTerm","state","setState","loading","setLoading","error","setError","console","log","fetchMovies","movies","prev"],"mappings":";;AAAA;AACA;AACA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,CADW;AAEjBC,EAAAA,OAAO,EAAE,EAFQ;AAGjBC,EAAAA,WAAW,EAAE,CAHI;AAIjBC,EAAAA,aAAa,EAAE;AAJE,CAArB;AAOA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAE9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACG,YAAD,CAAlC,CAJ8B,CAIoB;;AAClD,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,KAAD,CAAlC;AAEAiB,EAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ;;AAEA,QAAMU,WAAW,GAAG,OAAOf,IAAP,EAAaK,UAAU,GAAG,EAA1B,KAAiC;AACjD;AACA;AACA,QAAG;AACCO,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMM,MAAM,GAAG,MAAMlB,GAAG,CAACiB,WAAJ,CAAgBV,UAAhB,EAA4BL,IAA5B,CAArB,CAJD,CAKC;;AAEAQ,MAAAA,QAAQ,CAACS,IAAI,KAAK,EAAE;AAChB,WAAGD,MADW;AAEdf,QAAAA,OAAO,EACHD,IAAI,GAAG,CAAP,GAAW,CAAC,GAAGiB,IAAI,CAAChB,OAAT,EAAkB,GAAGe,MAAM,CAACf,OAA5B,CAAX,GAAkD,CAAC,GAAGe,MAAM,CAACf,OAAX,CAHxC,CAId;;AAJc,OAAL,CAAL,CAAR;AAMH,KAbD,CAaE,OAAOU,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KAlBgD,CAmBjD;;;AACAF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GArBD,CAV8B,CAgC9B;;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,WAAW,CAAC,CAAD,CAAX,EAAgBV,UAAhB;AACH,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT,CAjC8B,CAmCb;AACjB;AACA;;AAEA,SAAO;AAACE,IAAAA,KAAD;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA,KAAjB;AAAwBL,IAAAA;AAAxB,GAAP;AACH,CAxCM;;GAAMF,Y","sourcesContent":["//custom hooks\n//moving logic into here so we can re use it\nimport {useState, useEffect} from 'react';\n\n//importing API\nimport API from '../API'\n\nconst initialState = {\n    page: 0,\n    results: [],\n    total_pages: 0,\n    total_results: 0\n}\n\nexport const useHomeFetch = () => {\n\n    const [searchTerm, setSearchTerm] = useState('');\n\n    const [state, setState] = useState(initialState); //set default state\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    console.log(searchTerm);\n\n    const fetchMovies = async (page, searchTerm = '') => {\n        //async function lets us grab information from our api\n        //searchTerm will use a state value but when a search term isn't passed in it will default to an empty string as defined in the parameter\n        try{\n            setError(false);\n            setLoading(true);\n\n            const movies = await API.fetchMovies(searchTerm, page);\n            // console.log(movies);\n\n            setState(prev => ({ //returning an object\n                ...movies,\n                results:\n                    page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n                //^^the \"...\" is used to grab all of the requested results and \"spread\" it into the results array. Appends a new list of movies to the previous list if the results return more than one page. If we are not loading more we can just wipe out the previous list\n            }))\n        } catch (error) {\n            setError(true);\n        }\n        //since we had set the loading to true, we have to set it to false when we have grabbed all the movies\n        setLoading(false);\n    }\n    //initial render and search (first page)\n    useEffect(() => {\n        fetchMovies(1), searchTerm\n    }, [searchTerm]) //will trigger again each time a search term is passed\n    //^^since we didn't define what we are searching for, the first page returns the most popular movies currently (as declared in API.js ln 19-24)\n    //*each page can have up to 1000 results\n\n    return {state, loading, error, setSearchTerm};\n};\n\n"]},"metadata":{},"sourceType":"module"}