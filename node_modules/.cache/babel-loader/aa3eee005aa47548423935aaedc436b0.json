{"ast":null,"code":"var _jsxFileName = \"/Users/kenyonluce/IdeaProjects/react-exercises/src/components/Home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; //importing config.js\n\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from \"../config\"; //importing components\n\nimport HeroImage from './HeroImage';\nimport Grid from './Grid';\nimport Thumb from './Thumb';\nimport Spinner from './Spinner';\nimport SearchBar from \"./SearchBar\";\nimport Button from \"./Button\"; //importing custom hook\n\nimport { useHomeFetch } from '../hooks/useHomeFetch'; //importing image (default image)\n\nimport DefaultImage from '../images/no_image.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  //since we a custom hook, we can call on its objects in order to use them\n  const {\n    state,\n    loading,\n    error,\n    searchTerm,\n    setSearchTerm,\n    setIsLoadingMore\n  } = useHomeFetch(); //IMPORTANT: since useHomeFetch is a function grabbing values from the movie API, we need to include \"()\"\n\n  console.log(state);\n  console.log(state.page); //QUESTION: why does it log the same results array 4 times when logging the state?\n  //ANSWER: React re renders every time a state is changed. This should not affect the performance of the page as it only displays the most updated information\n  // useEffect(() => {\n  //     fetchMovies(1, \"search\")\n  // }, [])\n  // //^^returns first page of movies containing the word (\"search\") in their title\n  // return <div>Home Page</div>\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Something went wrong ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 22\n  }, this); //error message\n\n  return (\n    /*#__PURE__*/\n    //IMPORTANT: you can only return one parent tag at a time, so we will need to wrap everything in one tag. In this case, we are using a fragment (or empty tag) to wrap all our other tags, since we don't want to create a div\n    _jsxDEV(_Fragment, {\n      children: [!searchTerm && state.results[0] ?\n      /*#__PURE__*/\n      //banner movie will only display on initial load, when searching the banner will go away\n      _jsxDEV(HeroImage //giving it props using string literal\n      , {\n        image: `${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`,\n        title: state.results[0].original_title,\n        text: state.results[0].overview //some of these methods are getting errors, that is because they are coming directly from the Movie Database API\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this) : null, /*#__PURE__*/_jsxDEV(SearchBar, {\n        setSearchTerm: setSearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Grid, {\n        header: searchTerm ? 'Search Results' : 'Popular Movies',\n        children: [\" \", state.results.map(movie =>\n        /*#__PURE__*/\n        // <div key={movie.id}>{movie.title}</div> //returns movie title from each result\n        // //giving each div a key makes each movie result unique\n        _jsxDEV(Thumb, {\n          clickable: true,\n          image: movie.poster_path ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path : DefaultImage,\n          movieId: movie.id\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }, this), \" \", state.page < state.total_pages && !loading &&\n      /*#__PURE__*/\n      //button will only appear as long as there are still pages to load\n      _jsxDEV(Button, {\n        text: \"Load More\",\n        callback: () => setIsLoadingMore(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true)\n  );\n}; //ALWAYS EXPORT the component so it can be compiled correctly\n\n\n_s(Home, \"P1s08GwjTscSr9+LuqkoGLTL+LY=\", false, function () {\n  return [useHomeFetch];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/kenyonluce/IdeaProjects/react-exercises/src/components/Home.js"],"names":["React","POSTER_SIZE","BACKDROP_SIZE","IMAGE_BASE_URL","HeroImage","Grid","Thumb","Spinner","SearchBar","Button","useHomeFetch","DefaultImage","Home","state","loading","error","searchTerm","setSearchTerm","setIsLoadingMore","console","log","page","results","backdrop_path","original_title","overview","map","movie","poster_path","id","total_pages"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAAQC,WAAR,EAAqBC,aAArB,EAAoCC,cAApC,QAAyD,WAAzD,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;AACA,SAAQC,YAAR,QAA2B,uBAA3B,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf;AACA,QAAM;AAACC,IAAAA,KAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA,UAAvB;AAAmCC,IAAAA,aAAnC;AAAkDC,IAAAA;AAAlD,MAAsER,YAAY,EAAxF,CAFe,CAE6E;;AAE5FS,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACQ,IAAlB,EALe,CAMf;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA,MAAGN,KAAH,EAAU,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CAhBK,CAgBuC;;AAEtD;AAAA;AACI;AACA;AAAA,iBAEK,CAACC,UAAD,IAAeH,KAAK,CAACS,OAAN,CAAc,CAAd,CAAf;AAAA;AAAkC;AAC/B,cAAC,SAAD,CAAW;AAAX;AACI,QAAA,KAAK,EAAG,GAAEnB,cAAe,GAAED,aAAc,GAAEW,KAAK,CAACS,OAAN,CAAc,CAAd,EAAiBC,aAAc,EAD9E;AAEI,QAAA,KAAK,EAAEV,KAAK,CAACS,OAAN,CAAc,CAAd,EAAiBE,cAF5B;AAGI,QAAA,IAAI,EAAEX,KAAK,CAACS,OAAN,CAAc,CAAd,EAAiBG,QAH3B,CAII;;AAJJ;AAAA;AAAA;AAAA;AAAA,cADH,GAOK,IATV,eAWI,QAAC,SAAD;AAAW,QAAA,aAAa,EAAER;AAA1B;AAAA;AAAA;AAAA;AAAA,cAXJ,oBAaI,QAAC,IAAD;AAAM,QAAA,MAAM,EAAED,UAAU,GAAG,gBAAH,GAAsB,gBAA9C;AAAA,wBACKH,KAAK,CAACS,OAAN,CAAcI,GAAd,CAAkBC,KAAK;AAAA;AACpB;AACA;AACA,gBAAC,KAAD;AAEI,UAAA,SAAS,MAFb;AAGI,UAAA,KAAK,EAAGA,KAAK,CAACC,WAAN,GAAoBzB,cAAc,GAAGF,WAAjB,GAA+B0B,KAAK,CAACC,WAAzD,GAAuEjB,YAHnF;AAII,UAAA,OAAO,EAAEgB,KAAK,CAACE;AAJnB,WACSF,KAAK,CAACE,EADf;AAAA;AAAA;AAAA;AAAA,gBAHH,CADL;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ,EAyBKf,OAAO,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAzBhB,OA0BKD,KAAK,CAACQ,IAAN,GAAaR,KAAK,CAACiB,WAAnB,IAAkC,CAAChB,OAAnC;AAAA;AAAgD;AAC7C,cAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,WAAb;AAAyB,QAAA,QAAQ,EAAE,MAAMI,gBAAgB,CAAC,IAAD;AAAzD;AAAA;AAAA;AAAA;AAAA,cA3BR;AAAA;AAFJ;AAiCH,CAnDD,C,CAqDA;;;GArDMN,I;UAE0EF,Y;;;KAF1EE,I;AAsDN,eAAeA,IAAf","sourcesContent":["import React from 'react';\n\n//importing config.js\nimport {POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL} from \"../config\";\n\n//importing components\nimport HeroImage from './HeroImage';\nimport Grid from './Grid';\nimport Thumb from './Thumb';\nimport Spinner from './Spinner';\nimport SearchBar from \"./SearchBar\";\nimport Button from \"./Button\";\n\n//importing custom hook\nimport {useHomeFetch} from '../hooks/useHomeFetch';\n\n//importing image (default image)\nimport DefaultImage from '../images/no_image.jpg';\n\nconst Home = () => {\n    //since we a custom hook, we can call on its objects in order to use them\n    const {state,loading, error, searchTerm, setSearchTerm, setIsLoadingMore} = useHomeFetch(); //IMPORTANT: since useHomeFetch is a function grabbing values from the movie API, we need to include \"()\"\n\n    console.log(state);\n    console.log(state.page);\n    //QUESTION: why does it log the same results array 4 times when logging the state?\n    //ANSWER: React re renders every time a state is changed. This should not affect the performance of the page as it only displays the most updated information\n\n    // useEffect(() => {\n    //     fetchMovies(1, \"search\")\n    // }, [])\n    // //^^returns first page of movies containing the word (\"search\") in their title\n\n    // return <div>Home Page</div>\n\n    if(error) return <div>Something went wrong ...</div>; //error message\n\n    return (\n        //IMPORTANT: you can only return one parent tag at a time, so we will need to wrap everything in one tag. In this case, we are using a fragment (or empty tag) to wrap all our other tags, since we don't want to create a div\n        <>\n            {/*here it will display the hero image if there are results available, if not it will return null and fall back*/}\n            {!searchTerm && state.results[0] ? //banner movie will only display on initial load, when searching the banner will go away\n                <HeroImage //giving it props using string literal\n                    image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\n                    title={state.results[0].original_title}\n                    text={state.results[0].overview}\n                    //some of these methods are getting errors, that is because they are coming directly from the Movie Database API\n                />\n                : null\n            }\n            <SearchBar setSearchTerm={setSearchTerm}/> {/*when a term is \"set\" in here, it will set the search term in our fetch */}\n            {/*creating grid to display list of popular movies*/}\n            <Grid header={searchTerm ? 'Search Results' : 'Popular Movies'}> {/*we want this title to change when we search something*/}\n                {state.results.map(movie => (\n                    // <div key={movie.id}>{movie.title}</div> //returns movie title from each result\n                    // //giving each div a key makes each movie result unique\n                    <Thumb\n                        key={movie.id}\n                        clickable\n                        image={ movie.poster_path ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path : DefaultImage }\n                        movieId={movie.id}\n                    />\n                ))}\n            </Grid>\n            {loading && <Spinner/>} {/*spinner only appears when pages are loading*/}\n            {state.page < state.total_pages && !loading && ( //button will only appear as long as there are still pages to load\n                <Button text='Load More' callback={() => setIsLoadingMore(true)}/>\n            )}\n        </>\n    )\n}\n\n//ALWAYS EXPORT the component so it can be compiled correctly\nexport default Home;"]},"metadata":{},"sourceType":"module"}