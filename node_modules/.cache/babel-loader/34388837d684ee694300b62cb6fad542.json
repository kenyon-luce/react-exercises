{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport API from '../API';\nexport const useMovieFetch = movieId => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState({});\n  const [error, setError] = useState({});\n  const fetchMovie = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(false);\n      const movie = await API.fetchMovies(movieId);\n      const credits = await API.fetchCredits(movieId); //Directors only\n\n      const directors = credits.crew.filter(member => member.job === 'Director'); //exporting state object\n\n      setState({ ...movie,\n        actors: credits.cast,\n        directors\n      });\n      setLoading(false);\n    } catch (error) {\n      setError(true);\n    }\n  }, [movieId]);\n  useEffect(() => {\n    fetchMovie();\n  }, [movieId, fetchMovie]); //refactored our code to be more strict, the function would work just fine without a callback, but we want to be more dependent on the movie in question so we don't get any unnecessary errors\n\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useMovieFetch, \"mVG40d5qG0xMga3QZvyPkjbJ1J0=\");","map":{"version":3,"sources":["/Users/kenyonluce/IdeaProjects/react-exercises/src/hooks/useMovieFetch.js"],"names":["useState","useEffect","useCallback","API","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchMovie","movie","fetchMovies","credits","fetchCredits","directors","crew","filter","member","job","actors","cast"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,WAA7B,QAA+C,OAA/C;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAI;AAAA;;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMY,UAAU,GAAGV,WAAW,CAAC,YAAY;AACvC,QAAI;AACAO,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,YAAME,KAAK,GAAG,MAAMV,GAAG,CAACW,WAAJ,CAAgBT,OAAhB,CAApB;AACA,YAAMU,OAAO,GAAG,MAAMZ,GAAG,CAACa,YAAJ,CAAiBX,OAAjB,CAAtB,CALA,CAMA;;AACA,YAAMY,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAb,CACdC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADX,CAAlB,CAPA,CAUA;;AACAd,MAAAA,QAAQ,CAAC,EACL,GAAGM,KADE;AAELS,QAAAA,MAAM,EAAEP,OAAO,CAACQ,IAFX;AAGLN,QAAAA;AAHK,OAAD,CAAR;AAMAR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAlBD,CAkBE,OAAOC,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GAtB6B,EAsB3B,CAACN,OAAD,CAtB2B,CAA9B;AAwBAJ,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,UAAU;AACb,GAFQ,EAEN,CAACP,OAAD,EAAUO,UAAV,CAFM,CAAT,CA7BoC,CAgCpC;;AAEA,SAAO;AAACN,IAAAA,KAAD;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACH,CAnCM;;GAAMN,a","sourcesContent":["import {useState, useEffect, useCallback} from 'react';\nimport API from '../API';\n\nexport const useMovieFetch = movieId => {\n    const [state, setState] = useState({});\n    const [loading, setLoading] = useState({});\n    const [error, setError] = useState({});\n\n    const fetchMovie = useCallback(async () => {\n        try {\n            setLoading(true);\n            setError(false);\n\n            const movie = await API.fetchMovies(movieId);\n            const credits = await API.fetchCredits(movieId);\n            //Directors only\n            const directors = credits.crew.filter(\n                member => member.job === 'Director'\n            );\n            //exporting state object\n            setState({\n                ...movie,\n                actors: credits.cast,\n                directors\n            });\n\n            setLoading(false);\n        } catch (error) {\n            setError(true);\n        }\n    }, [movieId]);\n\n    useEffect(() => {\n        fetchMovie();\n    }, [movieId, fetchMovie])\n    //refactored our code to be more strict, the function would work just fine without a callback, but we want to be more dependent on the movie in question so we don't get any unnecessary errors\n\n    return {state, loading, error};\n}"]},"metadata":{},"sourceType":"module"}