{"ast":null,"code":"var _jsxFileName = \"/Users/kenyonluce/IdeaProjects/react-exercises/src/components/Movie.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { API_KEY, IMAGE_BASE_URL, POSTER_SIZE } from \"../config\";\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport NoImage from '../images/no_image.jpg';\nimport { useMovieFetch } from \"../hooks/useMovieFetch\";\nimport BreadCrumb from \"./BreadCrumb\";\nimport MovieInfo from \"./MovieInfo\";\nimport MovieInfoBar from \"./MovieInfoBar\";\nimport Actor from './Actor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Movie = () => {\n  _s();\n\n  //using brackets because we want to include logic for fetching info from the API\n  const {\n    movieId\n  } = useParams(); //gives us the id of the movie so we can get info for that soecific movie\n\n  const {\n    state: movie,\n    loading,\n    error\n  } = useMovieFetch(movieId); //you can change the name of a property using ':'\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Something went wrong...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 23\n  }, this);\n  console.log(movie.actors[0].name);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BreadCrumb, {\n      movieTitle: movie.original_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieInfo, {\n      movie: movie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieInfoBar, {\n      time: movie.runtime,\n      budget: movie.budget,\n      revenue: movie.revenue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      header: \"Actors\",\n      children: movie.actors.map(actor => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Actor, {\n          name: actor.name,\n          character: actor.character,\n          imageUrl: actor.profile_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}` : NoImage\n        }, actor.character, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: NoImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Movie, \"VvJqC3A/Slcm+qO0UEAZeRQPTSE=\", false, function () {\n  return [useParams, useMovieFetch];\n});\n\n_c = Movie;\nexport default Movie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"sources":["/Users/kenyonluce/IdeaProjects/react-exercises/src/components/Movie.js"],"names":["React","useParams","API_KEY","IMAGE_BASE_URL","POSTER_SIZE","Grid","Spinner","NoImage","useMovieFetch","BreadCrumb","MovieInfo","MovieInfoBar","Actor","Movie","movieId","state","movie","loading","error","console","log","actors","name","original_title","runtime","budget","revenue","map","actor","character","profile_path"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,OAAR,EAAiBC,cAAjB,EAAiCC,WAAjC,QAAmD,WAAnD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAAQC,aAAR,QAA4B,wBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAAE;AAClB,QAAM;AAACC,IAAAA;AAAD,MAAYb,SAAS,EAA3B,CADgB,CACe;;AAE/B,QAAM;AAACc,IAAAA,KAAK,EAAEC,KAAR;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,MAAiCV,aAAa,CAACM,OAAD,CAApD,CAHgB,CAIhB;;AACA,MAAIG,OAAJ,EAAa,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEXC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgBC,IAA5B;AACA,sBACI;AAAA,4BAEI,QAAC,UAAD;AAAY,MAAA,UAAU,EAAEN,KAAK,CAACO;AAA9B;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEP;AAAlB;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEA,KAAK,CAACQ,OAA1B;AAAmC,MAAA,MAAM,EAAER,KAAK,CAACS,MAAjD;AAAyD,MAAA,OAAO,EAAET,KAAK,CAACU;AAAxE;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI,QAAC,IAAD;AAAM,MAAA,MAAM,EAAC,QAAb;AAAA,gBACKV,KAAK,CAACK,MAAN,CAAaM,GAAb,CAAiBC,KAAK,iBACnB;AAAA,gCACA,QAAC,KAAD;AAEI,UAAA,IAAI,EAAEA,KAAK,CAACN,IAFhB;AAGI,UAAA,SAAS,EAAEM,KAAK,CAACC,SAHrB;AAII,UAAA,QAAQ,EACJD,KAAK,CAACE,YAAN,GAAsB,GAAE3B,cAAe,GAAEC,WAAY,GAAEwB,KAAK,CAACE,YAAa,EAA1E,GACEvB;AANV,WACSqB,KAAK,CAACC,SADf;AAAA;AAAA;AAAA;AAAA,gBADA,eAUA;AAAK,UAAA,GAAG,EAAEtB;AAAV;AAAA;AAAA;AAAA;AAAA,gBAVA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA,kBADJ;AAyBH,CAlCD;;GAAMM,K;UACgBZ,S,EAEqBO,a;;;KAHrCK,K;AAoCN,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport {useParams} from 'react-router-dom';\nimport {API_KEY, IMAGE_BASE_URL, POSTER_SIZE} from \"../config\";\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport NoImage from '../images/no_image.jpg';\nimport {useMovieFetch} from \"../hooks/useMovieFetch\";\nimport BreadCrumb from \"./BreadCrumb\";\nimport MovieInfo from \"./MovieInfo\";\nimport MovieInfoBar from \"./MovieInfoBar\";\nimport Actor from './Actor'\n\nconst Movie = () => { //using brackets because we want to include logic for fetching info from the API\n    const {movieId} = useParams(); //gives us the id of the movie so we can get info for that soecific movie\n\n    const {state: movie, loading, error} = useMovieFetch(movieId);\n    //you can change the name of a property using ':'\n    if (loading) return <Spinner/>;\n    if (error) return <div>Something went wrong...</div>;\n\n    console.log(movie.actors[0].name)\n    return (\n        <>\n            {/*<div>Movie</div>*/}\n            <BreadCrumb movieTitle={movie.original_title}/>\n        {/*    ^^just a small note, the original_title property was not being called on because in my fetch hook I called on the plural version of the function, which was retrieving a list of movies rather than the info for a singular one, this issue was fixed after an hour by removing the 's' :D */}\n            <MovieInfo movie={movie}/>\n            <MovieInfoBar time={movie.runtime} budget={movie.budget} revenue={movie.revenue}/>\n            <Grid header='Actors'>\n                {movie.actors.map(actor => (\n                    <div>\n                    <Actor\n                        key={actor.character}\n                        name={actor.name}\n                        character={actor.character}\n                        imageUrl={\n                            actor.profile_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\n                            : NoImage\n                        }\n                    /> \n                    <img src={NoImage}/></div>\n                ))}\n\n            </Grid>\n        </>\n    )\n}\n\nexport default Movie;"]},"metadata":{},"sourceType":"module"}